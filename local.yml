version: "3"

volumes:
  collab_db: {}
  tempo: {}

services:
  postgres:
    restart: on-failure
    image: postgres:12
    container_name: collab_local_postgres
    env_file:
      - ./.env
    volumes:
      - collab_db:/var/lib/postgresql/data
    networks:
      - db_secure

  pgbouncer:
    restart: on-failure
    image: bitnami/pgbouncer:latest
    container_name: collab_local_pgbouncer
    environment:
      - POSTGRESQL_USERNAME=primeAdmin
      - POSTGRESQL_PASSWORD=belindat2014
      - POSTGRESQL_DATABASE=collab_db
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_PORT=5432
      - PGBOUNCER_PORT=6432
      - PGBOUNCER_MAX_CLIENT_CONN=1000
      - PGBOUNCER_DEFAULT_POOL_SIZE=50
      - PGBOUNCER_DATABASE=collab_db
    volumes:
      - /path/to/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - '6432:6432'
    depends_on:
      - postgres
    networks:
      - db_secure
      - collab-net

  # heimdall:
  #   restart: always
  #   build:
  #     context: .
  #     dockerfile: ./utils/proxy/Dockerfile
  #   image: collab_heimdall_image
  #   container_name: collab_local_heimdall
  #   ports:
  #     - "8087:8087"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - collab-net
  #     - db_secure

  django: &django
    restart: on-failure
    build:
      context: .
      dockerfile: ./utils/django/Dockerfile
    image: collab_django_image
    container_name: collab_local_django
    volumes:
      - .:/collab
      - tempo:/tmp
    env_file:
      - ./.env
    command: >
      /bin/bash -c "python manage.py makemigrations
                    python manage.py migrate
                    uvicorn config.asgi:application --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - pgbouncer
    networks:
      - collab-net
      # - db_secure

  fastapi:
    restart: on-failure
    build:
      context: .
      dockerfile: ./utils/fastapi/Dockerfile
    image: collab_fastapi_image
    container_name: collab_local_fastapi
    volumes:
      - ./api:/api
    command: >
      /bin/bash -c "uvicorn main:app --host 0.0.0.0 --port 8081 --reload"
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    networks:
      - collab-net

  react:
    restart: on-failure
    environment:
      - CHOKIDAR_USEPOLLING=true
    build:
      context: .
      dockerfile: ./utils/react/Dockerfile
    image: collab_image_react
    container_name: collab_local_react
    volumes:
      - ./frontend/:/frontend
      - /frontend/node_modules
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    command: >
      /bin/bash -c "npm start"
    depends_on:
      - django
    networks:
      - collab-net

  elasticsearch:
    container_name: collab_local_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - collab-net
    ports:
      - 9200:9200

  kibana:
    restart: on-failure
    build:
      context: .
      dockerfile: ./utils/kibana/Dockerfile
    container_name: collab_local_kibana
    image: collab_kibana_image
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ENTERPRISESEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - collab-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

  # redisInsight:
  #   image: redislabs/redisinsight:latest
  #   container_name: collab_local_redisinsight
  #   ports:
  #     - '8001:8001'
  #   volumes:
  #     - ./insights:/db
  #   networks:
  #     - collab-net

  redis:
    image: "redislabs/redismod"
    container_name: collab_local_redis
    ports:
      - "6379:6379"
    volumes:
      - ./rod:/data
    entrypoint: >
      redis-server
        --loadmodule /usr/lib/redis/modules/redisearch.so MINPREFIX 3
        --loadmodule /usr/lib/redis/modules/redisgraph.so
        --loadmodule /usr/lib/redis/modules/redistimeseries.so
        --loadmodule /usr/lib/redis/modules/rejson.so
        --loadmodule /usr/lib/redis/modules/redisbloom.so
        --loadmodule /usr/lib/redis/modules/redisgears.so Plugin /var/opt/redislabs/modules/rg/plugin/gears_python.so
        --save 3600 1
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - collab-net

  celery:
    <<: *django
    image: celery-collab-image
    restart: always
    container_name: collab_local_celery
    ports: []
    command: >
      /bin/bash -c "celery -A config.celery_app worker -l DEBUG -Q celery,videos,email
                    celery -A config.celery_app beat -l INFO"
    depends_on:
      - postgres
      - redis
      - pgbouncer
    volumes:
      - tempo:/tmp
    networks:
      - collab-net
      - db_secure

  mailhog:
    image: mailhog/mailhog
    container_name: collab_local_mailhog
    ports:
      - "1025:1025"  # SMTP Server
      - "8025:8025"  # Browsable view of mailhog UI
    restart: unless-stopped
    networks:
      - collab-net

  # imageProxy:
  #   image: darthsim/imgproxy
  #   container_name: collab_local_imageproxy
  #   ports:
  #     - "8080:8080"
  #   restart: unless-stopped
  #   networks:
  #     - collab-net

networks:
  collab-net:
    driver: bridge
  db_secure:
    driver: bridge
